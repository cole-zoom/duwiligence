[build-system]
requires = ["hatchling"]
build-backend = "hatchling.build"

[project]
name = "duwiligence"
version = "0.1.0"
description = "A Flask application for processing emails and generating newsletters with AI-powered content analysis"
readme = "README.md"
requires-python = ">=3.11"
license = {text = "MIT"}
authors = [
    {name = "Cole Dumanski", email = "coledumanski@gmail.com"}
]
keywords = ["flask", "ai", "newsletter", "email-processing", "pdf-generation"]
classifiers = [
    "Development Status :: 3 - Alpha",
    "Intended Audience :: Developers",
    "License :: OSI Approved :: MIT License",
    "Programming Language :: Python :: 3",
    "Programming Language :: Python :: 3.8",
    "Programming Language :: Python :: 3.9",
    "Programming Language :: Python :: 3.10",
    "Programming Language :: Python :: 3.11",
    "Programming Language :: Python :: 3.12",
    "Topic :: Internet :: WWW/HTTP :: WSGI :: Application",
    "Topic :: Software Development :: Libraries :: Python Modules",
]

dependencies = [
    "Flask[async]>=3.0.0",
    "python-dotenv>=1.0.0",
    "requests>=2.31.0",
    "hypercorn>=0.15.0",
    "reportlab>=4.0.0",
    "httpx>=0.25.0",
    "google-cloud-tasks>=2.14.0",
    "openai",
    "psycopg[binary]>=3.1.0",
]

[project.optional-dependencies]
dev = [
    "pytest>=7.4.0",
    "pytest-asyncio>=0.21.0",
    "pytest-flask>=1.3.0",
    "black>=23.0.0",
    "isort>=5.12.0",
    "flake8>=6.0.0",
    "mypy>=1.5.0",
]

[project.urls]
Homepage = "https://github.com/coledumanski/duwiligence"
Repository = "https://github.com/coledumanski/duwiligence"
Issues = "https://github.com/coledumanski/duwiligence/issues"

[project.scripts]
duwiligence = "main:app"

[tool.hatch.build.targets.wheel]
packages = ["utils"]

[tool.black]
line-length = 88
target-version = ['py38']
include = '\.pyi?$'
extend-exclude = '''
/(
  # directories
  \.eggs
  | \.git
  | \.hg
  | \.mypy_cache
  | \.tox
  | \.venv
  | build
  | dist
)/
'''

[tool.isort]
profile = "black"
multi_line_output = 3
line_length = 88
known_first_party = ["utils"]

[tool.mypy]
python_version = "3.8"
warn_return_any = true
warn_unused_configs = true
disallow_untyped_defs = true
disallow_incomplete_defs = true
check_untyped_defs = true
disallow_untyped_decorators = true
no_implicit_optional = true
warn_redundant_casts = true
warn_unused_ignores = true
warn_no_return = true
warn_unreachable = true
strict_equality = true

[tool.pytest.ini_options]
testpaths = ["tests"]
python_files = ["test_*.py", "*_test.py"]
python_classes = ["Test*"]
python_functions = ["test_*"]
addopts = [
    "--strict-markers",
    "--strict-config",
    "--verbose",
]
asyncio_mode = "auto"

[tool.coverage.run]
source = ["utils", "main.py"]
omit = [
    "*/tests/*",
    "*/test_*",
    "*/venv/*",
    "*/env/*",
    "*/.venv/*",
]

[tool.coverage.report]
exclude_lines = [
    "pragma: no cover",
    "def __repr__",
    "if self.debug:",
    "if settings.DEBUG",
    "raise AssertionError",
    "raise NotImplementedError",
    "if 0:",
    "if __name__ == .__main__.:",
    "class .*\\bProtocol\\):",
    "@(abc\\.)?abstractmethod",
]
